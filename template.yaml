AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: IoT Edge application

Parameters:
  CoreName:
    Description: Greengrass Core on which our resources will be deployed. Edited
    Default: "coreName"
    Type: String

Globals:
  Function:
    Timeout: 300

Resources:

  AlertsLF:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: alerts_nodejs
      Handler: alerts.getAll
      Runtime: nodejs12.x
      AutoPublishAlias: prod
      Environment:
        Variables:
          alertsTableName: 'PARKING_ALERTS_WARNINGS'
      Policies:
        - AWSLambdaExecute
        - CloudWatchLogsFullAccess
        - AmazonEC2FullAccess
        - AmazonDynamoDBFullAccess
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref AlertsAPI
            Path: /alerts
            Method: get

  AlertsAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: AlertsAPI
      StageName: prod
      MethodSettings:
        - ResourcePath: /alerts
          HttpMethod: GET
          MetricsEnabled: 'true'
          DataTraceEnabled: 'true'
          LoggingLevel: 'INFO'

  AlertsApiLIP:
    Type: AWS::Lambda::Permission
    Properties:
      SourceArn: !Join [ "", [ "arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref "AlertsAPI", "/*/GET/alerts" ] ]
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !GetAtt AlertsLF.Arn
      #SourceAccount: !Ref AWS::AccountId

  ParkingAPIGetAllMySQL:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: parking_nodejs
      Handler: parking.getAll
      Runtime: nodejs12.x
      AutoPublishAlias: prod
      Environment:
        Variables:
          deviceStatusTable: 'SMART_PARKING_DEVICE_STATUS'
          deviceMasterTable: 'SMART_PARKING_DEVICE_MASTER'
          deviceAddressMpg: 'SMART_PARKING_DEVICE_ADDRESS_MPG'
          deviceAddressMaster: 'SMART_PARKING_ADDRESS_MASTER'
          dbPass: !Sub '{{resolve:secretsmanager:SmartParkingRDSAdmin:SecretString:password}}'
          dbUser: !Sub '{{resolve:secretsmanager:SmartParkingRDSAdmin:SecretString:username}}'
          dbHost: !Sub '{{resolve:secretsmanager:SmartParkingRDSAdmin:SecretString:host}}'
          dbName: !Sub '{{resolve:secretsmanager:SmartParkingRDSAdmin:SecretString:dbname}}'

      Policies:
        - AWSLambdaExecute
        - AmazonRDSReadOnlyAccess
        - CloudWatchLogsFullAccess
        - AmazonEC2FullAccess
      Events:
        GetAllParkingResource:
          Type: Api
          Properties:
            RestApiId: !Ref ParkingAPI
            Path: /parking
            Method: get
        GetAllParkingByOccupancyResource:
          Type: Api
          Properties:
            RestApiId: !Ref ParkingAPI
            Path: /parking/isoccupied/{isoccupiedValue}
            Method: get
        GetParkingByAreaCodeResource:
          Type: Api
          Properties:
            RestApiId: !Ref ParkingAPI
            Path: /parking/code/{areaCodeValue}
            Method: get
        GetParkingByZipCodeResource:
          Type: Api
          Properties:
            RestApiId: !Ref ParkingAPI
            Path: /parking/zipcode/{zipCodeValue}
            Method: get

      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "${CoreName}-EdgeGatewaySecurityGroup"
        SubnetIds:
          - Fn::ImportValue:
              !Sub "${CoreName}-PublicSubnet1"
          - Fn::ImportValue:
              !Sub "${CoreName}-PublicSubnet2"

  ParkingAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: ParkingAPI
      StageName: prod
      MethodSettings:
        - ResourcePath: /
          HttpMethod: GET
          MetricsEnabled: 'true'
          DataTraceEnabled: 'true'
          LoggingLevel: 'INFO'
        - ResourcePath: /parking
          HttpMethod: GET
          MetricsEnabled: 'true'
          DataTraceEnabled: 'true'
          LoggingLevel: 'INFO'
        - ResourcePath: /parking/isoccupied/{isoccupiedValue}
          HttpMethod: GET
          MetricsEnabled: 'true'
          DataTraceEnabled: 'true'
          LoggingLevel: 'INFO'
        - ResourcePath: /parking/code/{areaCodeValue}
          HttpMethod: GET
          MetricsEnabled: 'true'
          DataTraceEnabled: 'true'
          LoggingLevel: 'INFO'
        - ResourcePath: /parking/zipcode/{zipCodeValue}
          HttpMethod: GET
          MetricsEnabled: 'true'
          DataTraceEnabled: 'true'
          LoggingLevel: 'INFO'
      TracingEnabled: true

  ParkingAPIGetAllMySqlLIP:
    Type: AWS::Lambda::Permission
    Properties:
      SourceArn: !Join [ "", [ "arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref "ParkingAPI", "/*/GET/parking" ] ]
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !GetAtt ParkingAPIGetAllMySQL.Arn
      #SourceAccount: !Ref AWS::AccountId


# API For reading Parking Master Data

  ParkingMasterDataMySqlLF:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: parking_nodejs
      Handler: parking.masterData
      Runtime: nodejs12.x
      AutoPublishAlias: prod
      Environment:
        Variables:
          parkingMaster: 'SMART_PARKING_MASTER'
          deviceAddressMaster: 'SMART_PARKING_ADDRESS_MASTER'
          parkingAddressMpg: 'SMART_PARKING_SITE_ADDRESS_MPG'
          dbPass: !Sub '{{resolve:secretsmanager:SmartParkingRDSAdmin:SecretString:password}}'
          dbUser: !Sub '{{resolve:secretsmanager:SmartParkingRDSAdmin:SecretString:username}}'
          dbHost: !Sub '{{resolve:secretsmanager:SmartParkingRDSAdmin:SecretString:host}}'
          dbName: !Sub '{{resolve:secretsmanager:SmartParkingRDSAdmin:SecretString:dbname}}'

      Policies:
        - AWSLambdaExecute
        - AmazonRDSReadOnlyAccess
        - CloudWatchLogsFullAccess
        - AmazonEC2FullAccess
      Events:
        GetResource:
          Type: Api
          Properties:
            RestApiId: !Ref ParkingMasterAPI
            Path: /parkingmaster/zipcode/{zipcodeValue}
            Method: get
      VpcConfig:
        SecurityGroupIds:
          - Fn::ImportValue:
              !Sub "${CoreName}-EdgeGatewaySecurityGroup"
        SubnetIds:
          - Fn::ImportValue:
              !Sub "${CoreName}-PublicSubnet1"
          - Fn::ImportValue:
              !Sub "${CoreName}-PublicSubnet2"

  ParkingMasterAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: ParkingMasterAPI
      StageName: prod
      MethodSettings:
        - ResourcePath: /parkingmaster/zipcode/{zipcodeValue}
          HttpMethod: GET
          MetricsEnabled: 'true'
          DataTraceEnabled: 'true'
          LoggingLevel: 'INFO'
      TracingEnabled: true

  ParkingMasterApiLIP:
    Type: AWS::Lambda::Permission
    Properties:
      SourceArn: !Join [ "", [ "arn:aws:execute-api:", !Ref "AWS::Region", ":", !Ref "AWS::AccountId", ":", !Ref "ParkingMasterAPI", "/*/GET/parkingmaster" ] ]
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      FunctionName: !GetAtt ParkingMasterDataMySqlLF.Arn
      #SourceAccount: !Ref AWS::AccountId

  ApiGatewayAccountConfig:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn: #!GetAtt LambdaExecutionRole.Arn
        Fn::ImportValue:
          !Sub "${CoreName}-ApiGatewayServiceRoleArn"

  SPApiGatewayLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      RetentionInDays: 7

Outputs:
  CoreName:
    Description: CoreName value that will be input to CloudFormation pipeline
    Value: !Ref CoreName
